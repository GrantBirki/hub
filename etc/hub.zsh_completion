#compdef hub

# Zsh will source this file when attempting to autoload the "_hub" function,
# typically on the first attempt to complete the hub command.
#
# For this to work it needs to be copied or symlinked as `_hub` into a
# directory in your $fpath.
#
# This gets also done for `alias git=hub` by default, and can be forced using
# `compdef _hub git`.

(( $+functions[_git-alias] )) ||
_git-alias () {
  _arguments \
    '-s[output shell script suitable for eval]' \
    '1::shell:(zsh bash csh)'
}

(( $+functions[_git-browse] )) ||
_git-browse () {
  _arguments \
    '-u[output the URL]' \
    '2::subpage:(wiki commits issues)'
}

(( $+functions[_git-compare] )) ||
_git-compare () {
  _arguments \
    '-u[output the URL]' \
    ':[start...]end range:'
}

(( $+functions[_git-create] )) ||
_git-create () {
  _arguments \
    '::name (REPOSITORY or ORGANIZATION/REPOSITORY):' \
    '-p[make repository private]' \
    '-d[description]:description' \
    '-h[home page]:repository home page URL:_urls'
}

(( $+functions[_git-fork] )) ||
_git-fork () {
  _arguments \
    '--no-remote[do not add a remote for the new fork]'
}

(( $+functions[_git-pull-request] )) ||
_git-pull-request () {
  _arguments \
    '-f[force (skip check for local commits)]' \
    '-b[base]:base ("branch", "owner\:branch", "owner/repo\:branch"):' \
    '-h[head]:head ("branch", "owner\:branch", "owner/repo\:branch"):' \
    - set1 \
      '-m[message]' \
      '-F[file]' \
    - set2 \
      '-i[issue]:issue number:' \
    - set3 \
      '::issue-url:_urls'
}

zstyle ':completion::complete:*:argument-1:' user-commands \
    'alias:show shell instructions for wrapping git' \
    'browse:open a GitHub page in the default browser' \
    'ci-status:show the CI status of a commit' \
    'compare:open a compare page on GitHub' \
    'create:create this repository on GitHub and add GitHub as origin' \
    'fork:make a fork of a remote repository on GitHub and add as remote' \
    'pull-request:open a pull request on GitHub' \
    'issue:list or create issues (beta)' \
    'release:list or create releases (beta)'

_hub() {
  service=git
  _git
}

# Make sure we actually attempt to complete on the first "tab" from the user.
_hub
